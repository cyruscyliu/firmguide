#!/usr/bin/python
import os
from slcore.cgenerator import generate_cmd_parser
from slcore.aregister import register_analysis_and_group
from slcore.pmanager import get_project_callbacks, project_get_current


if __name__ == '__main__':
    # register commands and parse the cmdline
    parser = generate_cmd_parser()

    args = vars(parser.parse_args())

    # check: wrong command/no command
    if 'callback' not in args:
        parser.print_help()
        exit()

    # switch
    args['base_dir'] = os.path.dirname(os.path.realpath(__file__))
    args['qemu_dir'] = open('.qemu').readline().strip()
    args['rootfs_dir'] = os.path.join(args['base_dir'], 'rootfs')
    args['llvm_dir'] = open('.llvmbin').readline().strip()
    args['sparse_dir'] = open('.sparse').readline().strip()
    callback = args.pop('callback')

    # 1 project commands
    if callback.startswith('project'):
        get_project_callbacks()[callback](**args)
        exit()

    # 2 analysis commands
    project = project_get_current(args['base_dir'])
    # 2.1 check: no image
    if not len(project.attrs['images']):
        print('error: please add a image first')
        exit()
    # 2.2 register analysis and analysis group
    analyses_and_groups = register_analysis_and_group()
    if callback not in analyses_and_groups:
        print('error: callback {} is not implemented')
        exit(-1)
    # 2.3 register && warmup && run && wrapup
    analysis_manager = \
        analyses_and_groups[callback]['object'].register(project, **args)
    status = analysis_manager.warmup()
    if not status:
        exit(-1)
    analysis_manager.print_analyses_chain()
    analysis_manager.run()
    analysis_manager.wrapup()
