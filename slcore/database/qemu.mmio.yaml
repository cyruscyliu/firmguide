mmio,generic:
    get_header: []
    get_field:
        - MemoryRegion {{ name }}_mmio{{ id }};
    get_registers:
        - uint32_t {{ name }}{{ id }}_regs[{{ reg.size|to_hex }} >> 2];
    get_reset:
        - s->{{ name }}{{ id }}[{{ register.offset|to_hex }}] = {{ register.value|to_hex }};
    get_body:
        - memory_region_init_io(&s->{{ name }}_mmio{{ id }}, NULL, &{{ name }}_ops{{ id }}, s, TYPE_{{ machine_name|to_upper }}, {{ reg.size|to_hex }});
        - memory_region_add_subregion_overlap(get_system_memory(), {{ reg.base|to_hex }}, &s->{{ name }}_mmio{{ id }}, {{ reg.priority }});
    get_connection: []
    get_suite:
        - |-
            static void {{ name }}{{ id }}_update(void *opaque)
            {
                /* {{ machine_name|to_upper }}State *s = opaque; */
            }

            static uint64_t {{ name }}{{ id }}_read(void *opaque, hwaddr offset, unsigned size)
            {
                {{ machine_name|to_upper }}State *s = opaque;
                uint32_t res = 0;

                switch (offset) {
                default:
                    qemu_log_mask(LOG_GUEST_ERROR, "%s: Bad offset %"HWADDR_PRIx"\\n", __func__, offset);
                    return 0;
                case {{ reg.size|to_offset }}:
                    res = s->{{ name }}{{ id }}[offset >> 2];
                    break;
                }
                return res;
            }

            static void {{ name }}{{ id }}_write(void *opaque, hwaddr offset, uint64_t val, unsigned size)
            {
                {{ machine_name|to_upper  }}State *s = opaque;

                switch (offset) {
                default:
                    qemu_log_mask(LOG_GUEST_ERROR, "%s: Bad offset %"HWADDR_PRIx"\\n", __func__, offset);
                    return;
                case {{ reg.size|to_offset }}:
                    s->{{ name }}{{ id }}[offset >> 2] = val;
                    break;
            }
            {{ name }}{{ id }}_update(s);
            }

            static const MemoryRegionOps {{ name }}_ops{{ id }} = {
                .read = {{ name }}{{ id }}_read,
                .write = {{ name }}{{ id }}_write,
                .endianness = {{ endian }},
            };
    parameters: [name, regs, endian]
