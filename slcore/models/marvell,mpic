2020-03-12 08:07:19,254 - INFO - srcodec - get_funccalls2 - None->armada_370_xp_mpic_of_init(None)(drivers/irqchip/irq-armada-370-xp.c)
2020-03-12 08:07:19,254 - INFO - srcodec - ana_funccalls2 - ->armada_370_xp_mpic_of_init->__irq_domain_add(unhandled)(None)
     armada_370_xp_mpic_domain = irq_domain_add_linear(node, nr_irqs, &armada_370_xp_mpic_irq_ops, ((void *)0)); 
        # 1 armada_370_xp_mpic_irq_ops
         static const struct irq_domain_ops armada_370_xp_mpic_irq_ops = {
            .map = armada_370_xp_mpic_irq_map, # this one
            .xlate = irq_domain_xlate_onecell,
         };
        # 2 armada_370_xp_mpic_irq_map
        irq_set_chip_and_handler(virq, &armada_370_xp_irq_chip, handle_percpu_devid_irq);
        irq_set_chip_and_handler(virq, &armada_370_xp_irq_chip, handle_level_irq); 
        # 3 armada_370_xp_irq_chip
        static struct irq_chip armada_370_xp_irq_chip = {
            .name = "MPIC",
            .irq_mask = armada_370_xp_irq_mask,
            .irq_mask_ack = armada_370_xp_irq_mask,
            .irq_unmask = armada_370_xp_irq_unmask,
        };
        # 4 armada_370_xp_irq_mask
        __raw_writel(( u32 ) (( __le32 )(__u32)(hwirq)), main_int_base + (0x34));})
        __raw_writel(( u32 ) (( __le32 )(__u32)(hwirq)), per_cpu_int_base + (0x48));})
        !!!RESULT!!! 'mask': {'action': 'irqn', 'rname': 'r13'}
        !!!RESULT!!! 'mask_ack': {'action': 'irqn', 'rname': 'r13'}
        !!!RESULT!!! 'mask': {'action': 'irqn', 'rname': 'r18'}
        !!!RESULT!!! 'mask_ack': {'action': 'irqn', 'rname': 'r18'}
        # 5 armada_370_xp_irq_unmask
        __raw_writel(( u32 ) (( __le32 )(__u32)(hwirq)), main_int_base + (0x30));})
        __raw_writel(( u32 ) (( __le32 )(__u32)(hwirq)), per_cpu_int_base + (0x4C));})
        !!!RESULT!!! 'unmask': {'action': 'irqn', 'rname': 'r12'}
        !!!RESULT!!! 'unmask': {'action': 'irqn', 'rname': 'r19'}
        # 6 reg = <0x20A00 0x2D0 0x21070 0x58>; 
        !!!RESULT!!! main_int_base = 0x20A00
        !!!RESULT!!! per_cpu_int_base = 0x21070
2020-03-12 08:07:19,254 - INFO - srcodec - ana_funccalls2 - ->armada_370_xp_mpic_of_init->__irq_set_handler(unhandled)(None)
        set_handle_irq(armada_370_xp_handle_irq); # the main interrupt controller will call this
        irq_set_chained_handler(parent_irq, armada_370_xp_mpic_handle_cascade_irq); # the bridge interrtup controller will call this
        # 1 armada_370_xp_handle_irq
        irqstat = __raw_readl(per_cpu_int_base + (0x44));
        irqnr = irqstat & 0x3FF;
        !!!RESULT!!!{'irqn': 'i', 'set_body': ['s->r17 = i & 0x3FF;'], 'clear_body': ['s->r17 = 0xFFFFFFFF;']}
        # 2 if (irqnr > 1022) break;
        !!!RESULT!!!n_irq=1022, we will be not using that many irqs.
2020-03-12 08:07:19,605 - INFO - srcodec - get_funccalls2 - ->armada_370_xp_mpic_of_init->__builtin_unreachable(no address)(None)
2020-03-12 08:07:25,177 - INFO - srcodec - get_funccalls2 - ->armada_370_xp_mpic_of_init->armada_xp_mpic_perf_init(None)(drivers/irqchip/irq-armada-370-xp.c)
2020-03-12 08:07:28,822 - INFO - srcodec - get_funccalls2 - ->->armada_xp_mpic_perf_init->arm_heavy_mb(None)(arch/arm/mm/flush.c)
2020-03-12 08:07:34,287 - INFO - srcodec - get_funccalls2 - ->armada_370_xp_mpic_of_init->armada_xp_mpic_smp_cpu_init(None)(drivers/irqchip/irq-armada-370-xp.c)
2020-03-12 08:07:37,800 - INFO - srcodec - get_funccalls2 - ->->armada_xp_mpic_smp_cpu_init->arm_heavy_mb(None)(arch/arm/mm/flush.c)
2020-03-12 08:07:43,523 - INFO - srcodec - get_funccalls2 - ->armada_370_xp_mpic_of_init->armada_370_xp_msi_init(None)(drivers/irqchip/irq-armada-370-xp.c)
2020-03-12 08:07:43,523 - INFO - srcodec - ana_funccalls2 - ->->armada_370_xp_msi_init->__irq_domain_add(unhandled)(None)
2020-03-12 08:08:02,220 - INFO - srcodec - get_funccalls2 - ->->armada_370_xp_msi_init->pci_msi_create_irq_domain(None)(drivers/pci/msi.c)
2020-03-12 08:08:21,226 - INFO - srcodec - get_funccalls2 - ->->->pci_msi_create_irq_domain->pci_msi_domain_update_dom_ops(None)(drivers/pci/msi.c)
2020-03-12 08:08:40,187 - INFO - srcodec - get_funccalls2 - ->->->pci_msi_create_irq_domain->pci_msi_domain_update_chip_ops(None)(drivers/pci/msi.c)
2020-03-12 08:08:40,536 - INFO - srcodec - get_funccalls2 - ->->->->pci_msi_domain_update_chip_ops->__builtin_unreachable(no address)(None)
2020-03-12 08:08:45,639 - INFO - srcodec - get_funccalls2 - ->->->pci_msi_create_irq_domain->msi_create_irq_domain(None)(kernel/irq/msi.c)
2020-03-12 08:08:45,965 - INFO - srcodec - get_funccalls2 - ->->->->msi_create_irq_domain->msi_domain_update_dom_ops(no address)(None)
2020-03-12 08:08:46,291 - INFO - srcodec - get_funccalls2 - ->->->->msi_create_irq_domain->msi_domain_update_chip_ops(no address)(None)
2020-03-12 08:09:04,035 - INFO - srcodec - get_funccalls2 - ->->->->msi_create_irq_domain->irq_domain_create_hierarchy(None)(kernel/irq/irqdomain.c)
2020-03-12 08:09:04,035 - INFO - srcodec - ana_funccalls2 - ->->->->->irq_domain_create_hierarchy->__irq_domain_add(unhandled)(None)
2020-03-12 08:09:07,560 - INFO - srcodec - get_funccalls2 - ->->armada_370_xp_msi_init->arm_heavy_mb(None)(arch/arm/mm/flush.c)
2020-03-12 08:09:10,583 - INFO - srcodec - get_funccalls2 - ->armada_370_xp_mpic_of_init->ioremap(None)(arch/arm/mm/ioremap.c)
2020-03-12 08:09:10,609 - INFO - srcodec - get_funccalls2 - ->->ioremap->__builtin_return_address(no address)(None)
2020-03-12 08:09:14,146 - INFO - srcodec - get_funccalls2 - ->armada_370_xp_mpic_of_init->arm_heavy_mb(None)(arch/arm/mm/flush.c)
2020-03-12 08:09:32,033 - INFO - srcodec - get_funccalls2 - ->armada_370_xp_mpic_of_init->irq_set_default_host(None)(kernel/irq/irqdomain.c)
2020-03-12 08:09:33,138 - INFO - srcodec - get_funccalls2 - ->armada_370_xp_mpic_of_init->set_handle_irq(None)(arch/arm/kernel/irq.c)
2020-03-12 08:09:39,657 - INFO - srcodec - get_funccalls2 - ->armada_370_xp_mpic_of_init->set_smp_cross_call(None)(arch/arm/kernel/smp.c)
2020-03-12 08:09:40,503 - INFO - srcodec - get_funccalls2 - ->armada_370_xp_mpic_of_init->register_syscore_ops(None)(drivers/base/syscore.c)
2020-03-12 08:09:40,851 - INFO - srcodec - get_funccalls2 - ->->register_syscore_ops->mutex_unlock(inline in header)(None)
